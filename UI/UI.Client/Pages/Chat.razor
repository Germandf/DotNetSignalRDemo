@page "/"
@rendermode InteractiveWebAssembly
@implements IAsyncDisposable

<h3>Chat</h3>

@if (hubConnection?.State is HubConnectionState.Connected)
{
    <form @onsubmit:preventDefault="true" @onsubmit="Send">
        <div class="form-group mb-3">
            <label class="form-label">User:</label>
            <input class="form-control" @bind="userInput" />
        </div>
        <div class="form-group mb-3">
            <label class="form-label">Message:</label>
            <input class="form-control" @bind="messageInput" />
        </div>
        <button type="submit" class="btn btn-primary" disabled="@(false)">Send</button>
    </form>

    <ul class="list-group mt-3">
        @foreach (var message in messages)
        {
            <li class="list-group-item">@message</li>
        }
    </ul>
}
else if (hubConnection?.State is HubConnectionState.Disconnected)
{
    <p class="text-danger"><em>Disconnected: @errorMessage</em></p>
}
else
{
    <p class="text-secondary"><em>Connecting...</em></p>
}

@code {

    private HubConnection? hubConnection;
    private List<string> messages = new();
    private string userInput = "";
    private string messageInput = "";
    private string errorMessage = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender is false) return;

        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7108/chatHub")
            .WithAutomaticReconnect(new BoundedLinearRetryPolicy())
            .Build();

        var refresh = async () => await InvokeAsync(StateHasChanged);
        hubConnection.Closed += _ => refresh();
        hubConnection.Reconnecting += _ => refresh();
        hubConnection.Reconnected += _ => refresh();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        try
        {
            await ConnectWithRetryAsync(hubConnection);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }

        StateHasChanged();
    }

    public static async Task ConnectWithRetryAsync(HubConnection connection)
    {
        while (true)
        {
            try
            {
                await connection.StartAsync();
                return;
            }
            catch
            {
                await Task.Delay(5000);
            }
        }
    }

    private Task Send() => hubConnection?.SendAsync("SendMessage", userInput, messageInput)
        .ContinueWith(_ => messageInput = "") ?? Task.CompletedTask;

    public ValueTask DisposeAsync() => hubConnection?.DisposeAsync() ?? ValueTask.CompletedTask;

    public class BoundedLinearRetryPolicy : IRetryPolicy
    {
        public TimeSpan? NextRetryDelay(RetryContext retryContext) => 
            TimeSpan.FromSeconds(Math.Min(5, retryContext.PreviousRetryCount));
    }
}
