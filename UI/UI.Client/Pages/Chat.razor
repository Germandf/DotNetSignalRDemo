@page "/"
@rendermode InteractiveWebAssembly
@implements IAsyncDisposable

<h3>Chat</h3>

@if (IsConnected)
{
    <form @onsubmit:preventDefault="true" @onsubmit="Send">
        <div class="form-group mb-3">
            <label class="form-label">User:</label>
            <input class="form-control" @bind="userInput" />
        </div>
        <div class="form-group mb-3">
            <label class="form-label">Message:</label>
            <input class="form-control" @bind="messageInput" />
        </div>
        <button type="submit" class="btn btn-primary" disabled="@(!IsConnected)">Send</button>
    </form>

    <ul class="list-group mt-3">
        @foreach (var message in messages)
        {
            <li class="list-group-item">@message</li>
        }
    </ul>
}
else
{
    <p class="text-secondary"><em>Connecting...</em></p>
}

@code {

    private HubConnection? hubConnection;
    private List<string> messages = new();
    private string userInput = "";
    private string messageInput = "";

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7108/chatHub")
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private Task Send() => hubConnection?.SendAsync("SendMessage", userInput, messageInput)
        .ContinueWith(_ => messageInput = "") ?? Task.CompletedTask;

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public ValueTask DisposeAsync() => hubConnection?.DisposeAsync() ?? ValueTask.CompletedTask;
}
