@page "/chat"
@rendermode InteractiveWebAssembly
@implements IAsyncDisposable

<h3>Chat</h3>

@if (IsConnected)
{
    <div>
        <input type="text" @bind="userInput" />
        <input type="text" @bind="messageInput" />
        <button @onclick="Send">Send</button>
    </div>
    <ul>
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>
}
else
{
    <p><em>Connecting...</em></p>
}

@code {

    private HubConnection? hubConnection;
    private List<string> messages = new();
    private string userInput = "";
    private string messageInput = "";

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7108/chatHub")
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    Task Send() => hubConnection?.SendAsync("SendMessage", userInput, messageInput).ContinueWith(_ => messageInput = "") ?? Task.CompletedTask;

    public bool IsConnected => hubConnection is not null && hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
